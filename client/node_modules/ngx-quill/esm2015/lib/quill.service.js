import { __awaiter, __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
let QuillService = class QuillService {
    constructor(config) {
        this.config = config;
        this.count = 0;
    }
    getQuill() {
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                this.Quill = ((yield import('quill')).default);
                // Only register custom options and modules once
                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {
                    const newCustomOption = this.Quill.import(customOption.import);
                    newCustomOption.whitelist = customOption.whitelist;
                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);
                });
                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {
                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);
                });
                resolve(this.Quill);
            }));
        }
        return this.$importPromise;
    }
};
QuillService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
];
QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
QuillService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(QUILL_CONFIG_TOKEN))
], QuillService);
export { QuillService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1xdWlsbC8iLCJzb3VyY2VzIjpbImxpYi9xdWlsbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQTs7O0FBSzNFLElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFLdkIsWUFDc0MsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUhqRCxVQUFLLEdBQUcsQ0FBQyxDQUFBO0lBSWQsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLENBQU8sT0FBTyxFQUFFLEVBQUU7O2dCQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBUSxDQUFBO2dCQUVyRCxnREFBZ0Q7Z0JBQ2hELE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFO29CQUNsRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQzlELGVBQWUsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQTtvQkFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUE7Z0JBQ3ZGLENBQUMsRUFBQztnQkFFRixNQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSwwQ0FBRSxPQUFPLENBQUMsQ0FBQyxFQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFFO29CQUM1RCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtnQkFDdEYsQ0FBQyxFQUFDO2dCQUVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDckIsQ0FBQyxDQUFBLENBQUMsQ0FBQTtTQUNIO1FBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFBO0lBQzVCLENBQUM7Q0FDRixDQUFBOzs0Q0F6QkksTUFBTSxTQUFDLGtCQUFrQjs7O0FBTmpCLFlBQVk7SUFIeEIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQU9HLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7R0FObEIsWUFBWSxDQStCeEI7U0EvQlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBRVUlMTF9DT05GSUdfVE9LRU4sIFF1aWxsQ29uZmlnIH0gZnJvbSAnLi9xdWlsbC1lZGl0b3IuaW50ZXJmYWNlcydcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUXVpbGxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBRdWlsbCE6IGFueVxuICBwcml2YXRlICRpbXBvcnRQcm9taXNlITogUHJvbWlzZTxhbnk+XG4gIHByaXZhdGUgY291bnQgPSAwXG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChRVUlMTF9DT05GSUdfVE9LRU4pIHByaXZhdGUgY29uZmlnOiBRdWlsbENvbmZpZ1xuICApIHt9XG5cbiAgZ2V0UXVpbGwoKSB7XG4gICAgdGhpcy5jb3VudCsrXG4gICAgaWYgKCF0aGlzLlF1aWxsICYmIHRoaXMuY291bnQgPT09IDEpIHtcbiAgICAgIHRoaXMuJGltcG9ydFByb21pc2UgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLlF1aWxsID0gKChhd2FpdCBpbXBvcnQoJ3F1aWxsJykpLmRlZmF1bHQpIGFzIGFueVxuXG4gICAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgY3VzdG9tIG9wdGlvbnMgYW5kIG1vZHVsZXMgb25jZVxuICAgICAgICB0aGlzLmNvbmZpZy5jdXN0b21PcHRpb25zPy5mb3JFYWNoKChjdXN0b21PcHRpb24pID0+IHtcbiAgICAgICAgICBjb25zdCBuZXdDdXN0b21PcHRpb24gPSB0aGlzLlF1aWxsLmltcG9ydChjdXN0b21PcHRpb24uaW1wb3J0KVxuICAgICAgICAgIG5ld0N1c3RvbU9wdGlvbi53aGl0ZWxpc3QgPSBjdXN0b21PcHRpb24ud2hpdGVsaXN0XG4gICAgICAgICAgdGhpcy5RdWlsbC5yZWdpc3RlcihuZXdDdXN0b21PcHRpb24sIHRydWUsIHRoaXMuY29uZmlnLnN1cHByZXNzR2xvYmFsUmVnaXN0ZXJXYXJuaW5nKVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuY29uZmlnLmN1c3RvbU1vZHVsZXM/LmZvckVhY2goKHtpbXBsZW1lbnRhdGlvbiwgcGF0aH0pID0+IHtcbiAgICAgICAgICB0aGlzLlF1aWxsLnJlZ2lzdGVyKHBhdGgsIGltcGxlbWVudGF0aW9uLCB0aGlzLmNvbmZpZy5zdXBwcmVzc0dsb2JhbFJlZ2lzdGVyV2FybmluZylcbiAgICAgICAgfSlcblxuICAgICAgICByZXNvbHZlKHRoaXMuUXVpbGwpXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kaW1wb3J0UHJvbWlzZVxuICB9XG59XG4iXX0=