import { __awaiter, __decorate, __generator, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation, NgZone } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
import { QuillService } from './quill.service';
var QuillViewComponent = /** @class */ (function () {
    function QuillViewComponent(platformId, config, renderer, elementRef, zone, service) {
        var _this = this;
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.service = service;
        this.strict = true;
        this.customModules = [];
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.config.format);
            var content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    QuillViewComponent.prototype.ngOnChanges = function (changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    };
    QuillViewComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var Quill, modules, debug, formats, theme;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isPlatformServer(this.platformId)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.service.getQuill()];
                    case 1:
                        Quill = _a.sent();
                        modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
                        modules.toolbar = false;
                        this.customOptions.forEach(function (customOption) {
                            var newCustomOption = Quill.import(customOption.import);
                            newCustomOption.whitelist = customOption.whitelist;
                            Quill.register(newCustomOption, true);
                        });
                        this.customModules.forEach(function (_a) {
                            var implementation = _a.implementation, path = _a.path;
                            Quill.register(path, implementation);
                        });
                        debug = this.debug;
                        if (!debug && debug !== false && this.config.debug) {
                            debug = this.config.debug;
                        }
                        formats = this.formats;
                        if (!formats && formats === undefined) {
                            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);
                        }
                        theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
                        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
                        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
                        this.zone.runOutsideAngular(function () {
                            _this.quillEditor = new Quill(_this.editorElem, {
                                debug: debug,
                                formats: formats,
                                modules: modules,
                                readOnly: true,
                                strict: _this.strict,
                                theme: theme
                            });
                        });
                        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
                        if (this.content) {
                            this.valueSetter(this.quillEditor, this.content);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    QuillViewComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customModules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "preserveWhitespace", void 0);
    QuillViewComponent = __decorate([
        Component({
            encapsulation: ViewEncapsulation.None,
            selector: 'quill-view',
            template: "\n",
            styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"]
        }),
        __param(0, Inject(PLATFORM_ID)),
        __param(1, Inject(QUILL_CONFIG_TOKEN)),
        __param(2, Inject(Renderer2)),
        __param(3, Inject(ElementRef)),
        __param(4, Inject(NgZone)),
        __param(5, Inject(QuillService))
    ], QuillViewComponent);
    return QuillViewComponent;
}());
export { QuillViewComponent };
//# sourceMappingURL=data:application/json;base64,