import { __awaiter, __decorate, __generator, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
var QuillService = /** @class */ (function () {
    function QuillService(config) {
        this.config = config;
        this.count = 0;
    }
    QuillService.prototype.getQuill = function () {
        var _this = this;
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                var _this = this;
                var _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, import('quill')];
                        case 1:
                            _a.Quill = ((_d.sent()).default);
                            // Only register custom options and modules once
                            (_b = this.config.customOptions) === null || _b === void 0 ? void 0 : _b.forEach(function (customOption) {
                                var newCustomOption = _this.Quill.import(customOption.import);
                                newCustomOption.whitelist = customOption.whitelist;
                                _this.Quill.register(newCustomOption, true, _this.config.suppressGlobalRegisterWarning);
                            });
                            (_c = this.config.customModules) === null || _c === void 0 ? void 0 : _c.forEach(function (_a) {
                                var implementation = _a.implementation, path = _a.path;
                                _this.Quill.register(path, implementation, _this.config.suppressGlobalRegisterWarning);
                            });
                            resolve(this.Quill);
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        return this.$importPromise;
    };
    QuillService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
    QuillService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(QUILL_CONFIG_TOKEN))
    ], QuillService);
    return QuillService;
}());
export { QuillService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1xdWlsbC8iLCJzb3VyY2VzIjpbImxpYi9xdWlsbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQTs7O0FBSzNFO0lBS0Usc0JBQ3NDLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFIakQsVUFBSyxHQUFHLENBQUMsQ0FBQTtJQUlkLENBQUM7SUFFSiwrQkFBUSxHQUFSO1FBQUEsaUJBcUJDO1FBcEJDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBTyxPQUFPOzs7Ozs7OzRCQUM5QyxLQUFBLElBQUksQ0FBQTs0QkFBVyxxQkFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUE7OzRCQUFwQyxHQUFLLEtBQUssR0FBRyxDQUFDLENBQUMsU0FBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBUSxDQUFBOzRCQUVyRCxnREFBZ0Q7NEJBQ2hELE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxVQUFDLFlBQVk7Z0NBQzlDLElBQU0sZUFBZSxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQ0FDOUQsZUFBZSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFBO2dDQUNsRCxLQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQTs0QkFDdkYsQ0FBQyxFQUFDOzRCQUVGLE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLDBDQUFFLE9BQU8sQ0FBQyxVQUFDLEVBQXNCO29DQUFyQixrQ0FBYyxFQUFFLGNBQUk7Z0NBQ3ZELEtBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBOzRCQUN0RixDQUFDLEVBQUM7NEJBRUYsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTs7OztpQkFDcEIsQ0FBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUE7SUFDNUIsQ0FBQzs7Z0RBeEJFLE1BQU0sU0FBQyxrQkFBa0I7OztJQU5qQixZQUFZO1FBSHhCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7UUFPRyxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO09BTmxCLFlBQVksQ0ErQnhCO3VCQXJDRDtDQXFDQyxBQS9CRCxJQStCQztTQS9CWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IFFVSUxMX0NPTkZJR19UT0tFTiwgUXVpbGxDb25maWcgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5pbnRlcmZhY2VzJ1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBRdWlsbFNlcnZpY2Uge1xuICBwcml2YXRlIFF1aWxsITogYW55XG4gIHByaXZhdGUgJGltcG9ydFByb21pc2UhOiBQcm9taXNlPGFueT5cbiAgcHJpdmF0ZSBjb3VudCA9IDBcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFFVSUxMX0NPTkZJR19UT0tFTikgcHJpdmF0ZSBjb25maWc6IFF1aWxsQ29uZmlnXG4gICkge31cblxuICBnZXRRdWlsbCgpIHtcbiAgICB0aGlzLmNvdW50KytcbiAgICBpZiAoIXRoaXMuUXVpbGwgJiYgdGhpcy5jb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy4kaW1wb3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuUXVpbGwgPSAoKGF3YWl0IGltcG9ydCgncXVpbGwnKSkuZGVmYXVsdCkgYXMgYW55XG5cbiAgICAgICAgLy8gT25seSByZWdpc3RlciBjdXN0b20gb3B0aW9ucyBhbmQgbW9kdWxlcyBvbmNlXG4gICAgICAgIHRoaXMuY29uZmlnLmN1c3RvbU9wdGlvbnM/LmZvckVhY2goKGN1c3RvbU9wdGlvbikgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld0N1c3RvbU9wdGlvbiA9IHRoaXMuUXVpbGwuaW1wb3J0KGN1c3RvbU9wdGlvbi5pbXBvcnQpXG4gICAgICAgICAgbmV3Q3VzdG9tT3B0aW9uLndoaXRlbGlzdCA9IGN1c3RvbU9wdGlvbi53aGl0ZWxpc3RcbiAgICAgICAgICB0aGlzLlF1aWxsLnJlZ2lzdGVyKG5ld0N1c3RvbU9wdGlvbiwgdHJ1ZSwgdGhpcy5jb25maWcuc3VwcHJlc3NHbG9iYWxSZWdpc3Rlcldhcm5pbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tTW9kdWxlcz8uZm9yRWFjaCgoe2ltcGxlbWVudGF0aW9uLCBwYXRofSkgPT4ge1xuICAgICAgICAgIHRoaXMuUXVpbGwucmVnaXN0ZXIocGF0aCwgaW1wbGVtZW50YXRpb24sIHRoaXMuY29uZmlnLnN1cHByZXNzR2xvYmFsUmVnaXN0ZXJXYXJuaW5nKVxuICAgICAgICB9KVxuXG4gICAgICAgIHJlc29sdmUodGhpcy5RdWlsbClcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRpbXBvcnRQcm9taXNlXG4gIH1cbn1cbiJdfQ==