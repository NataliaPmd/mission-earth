import { DomSanitizer } from '@angular/platform-browser';
import { QuillConfig, QuillModules, CustomOption, CustomModule } from './quill-editor.interfaces';
import QuillType, { Delta } from 'quill';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { QuillService } from './quill.service';
import * as ɵngcc0 from '@angular/core';
export interface Range {
    index: number;
    length: number;
}
export interface ContentChange {
    content: any;
    delta: Delta;
    editor: QuillType;
    html: string | null;
    oldDelta: Delta;
    source: string;
    text: string;
}
export interface SelectionChange {
    editor: QuillType;
    oldRange: Range | null;
    range: Range | null;
    source: string;
}
export interface Blur {
    editor: QuillType;
    source: string;
}
export interface Focus {
    editor: QuillType;
    source: string;
}
export declare type EditorChangeContent = ContentChange & {
    event: 'text-change';
};
export declare type EditorChangeSelection = SelectionChange & {
    event: 'selection-change';
};
export declare class QuillEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    private service;
    quillEditor: QuillType;
    editorElem: HTMLElement;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    customModules: CustomModule[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    trimOnValidation: boolean;
    onEditorCreated: EventEmitter<any>;
    onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection>;
    onContentChanged: EventEmitter<ContentChange>;
    onSelectionChanged: EventEmitter<SelectionChange>;
    onFocus: EventEmitter<Focus>;
    onBlur: EventEmitter<Blur>;
    disabled: boolean;
    onModelChange: (modelValue?: any) => void;
    onModelTouched: () => void;
    onValidatorChanged: () => void;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, config: QuillConfig, service: QuillService);
    static normalizeClassNames(classes: string): string[];
    valueGetter: (quillEditor: QuillType, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: QuillType, value: any) => any;
    ngAfterViewInit(): Promise<void>;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: Delta, oldDelta: Delta, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, { "required": "required"; "customToolbarPosition": "customToolbarPosition"; "sanitize": "sanitize"; "styles": "styles"; "strict": "strict"; "customOptions": "customOptions"; "customModules": "customModules"; "preserveWhitespace": "preserveWhitespace"; "trimOnValidation": "trimOnValidation"; "valueGetter": "valueGetter"; "valueSetter": "valueSetter"; "format": "format"; "theme": "theme"; "modules": "modules"; "debug": "debug"; "readOnly": "readOnly"; "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "formats": "formats"; "scrollingContainer": "scrollingContainer"; "bounds": "bounds"; "trackChanges": "trackChanges"; "classes": "classes"; }, { "onEditorCreated": "onEditorCreated"; "onEditorChanged": "onEditorChanged"; "onContentChanged": "onContentChanged"; "onSelectionChanged": "onSelectionChanged"; "onFocus": "onFocus"; "onBlur": "onBlur"; }, never, ["[quill-editor-toolbar]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBRdWlsbENvbmZpZywgUXVpbGxNb2R1bGVzLCBDdXN0b21PcHRpb24sIEN1c3RvbU1vZHVsZSB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnO1xuaW1wb3J0IFF1aWxsVHlwZSwgeyBEZWx0YSB9IGZyb20gJ3F1aWxsJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgUXVpbGxTZXJ2aWNlIH0gZnJvbSAnLi9xdWlsbC5zZXJ2aWNlJztcbmV4cG9ydCBpbnRlcmZhY2UgUmFuZ2Uge1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgbGVuZ3RoOiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbnRlbnRDaGFuZ2Uge1xuICAgIGNvbnRlbnQ6IGFueTtcbiAgICBkZWx0YTogRGVsdGE7XG4gICAgZWRpdG9yOiBRdWlsbFR5cGU7XG4gICAgaHRtbDogc3RyaW5nIHwgbnVsbDtcbiAgICBvbGREZWx0YTogRGVsdGE7XG4gICAgc291cmNlOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3Rpb25DaGFuZ2Uge1xuICAgIGVkaXRvcjogUXVpbGxUeXBlO1xuICAgIG9sZFJhbmdlOiBSYW5nZSB8IG51bGw7XG4gICAgcmFuZ2U6IFJhbmdlIHwgbnVsbDtcbiAgICBzb3VyY2U6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmx1ciB7XG4gICAgZWRpdG9yOiBRdWlsbFR5cGU7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEZvY3VzIHtcbiAgICBlZGl0b3I6IFF1aWxsVHlwZTtcbiAgICBzb3VyY2U6IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIHR5cGUgRWRpdG9yQ2hhbmdlQ29udGVudCA9IENvbnRlbnRDaGFuZ2UgJiB7XG4gICAgZXZlbnQ6ICd0ZXh0LWNoYW5nZSc7XG59O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBFZGl0b3JDaGFuZ2VTZWxlY3Rpb24gPSBTZWxlY3Rpb25DaGFuZ2UgJiB7XG4gICAgZXZlbnQ6ICdzZWxlY3Rpb24tY2hhbmdlJztcbn07XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBRdWlsbEVkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBkb21TYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBkb2M7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICBxdWlsbEVkaXRvcjogUXVpbGxUeXBlO1xuICAgIGVkaXRvckVsZW06IEhUTUxFbGVtZW50O1xuICAgIGNvbnRlbnQ6IGFueTtcbiAgICBmb3JtYXQ/OiAnb2JqZWN0JyB8ICdodG1sJyB8ICd0ZXh0JyB8ICdqc29uJztcbiAgICB0aGVtZT86IHN0cmluZztcbiAgICBtb2R1bGVzPzogUXVpbGxNb2R1bGVzO1xuICAgIGRlYnVnPzogJ3dhcm4nIHwgJ2xvZycgfCAnZXJyb3InIHwgZmFsc2U7XG4gICAgcmVhZE9ubHk/OiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBtaW5MZW5ndGg/OiBudW1iZXI7XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgZm9ybWF0cz86IHN0cmluZ1tdIHwgbnVsbDtcbiAgICBjdXN0b21Ub29sYmFyUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbSc7XG4gICAgc2FuaXRpemU6IGJvb2xlYW47XG4gICAgc3R5bGVzOiBhbnk7XG4gICAgc3RyaWN0OiBib29sZWFuO1xuICAgIHNjcm9sbGluZ0NvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgc3RyaW5nIHwgbnVsbDtcbiAgICBib3VuZHM/OiBIVE1MRWxlbWVudCB8IHN0cmluZztcbiAgICBjdXN0b21PcHRpb25zOiBDdXN0b21PcHRpb25bXTtcbiAgICBjdXN0b21Nb2R1bGVzOiBDdXN0b21Nb2R1bGVbXTtcbiAgICB0cmFja0NoYW5nZXM/OiAndXNlcicgfCAnYWxsJztcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGJvb2xlYW47XG4gICAgY2xhc3Nlcz86IHN0cmluZztcbiAgICB0cmltT25WYWxpZGF0aW9uOiBib29sZWFuO1xuICAgIG9uRWRpdG9yQ3JlYXRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25FZGl0b3JDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RWRpdG9yQ2hhbmdlQ29udGVudCB8IEVkaXRvckNoYW5nZVNlbGVjdGlvbj47XG4gICAgb25Db250ZW50Q2hhbmdlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRDaGFuZ2U+O1xuICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogRXZlbnRFbWl0dGVyPFNlbGVjdGlvbkNoYW5nZT47XG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPEZvY3VzPjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxCbHVyPjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBvbk1vZGVsQ2hhbmdlOiAobW9kZWxWYWx1ZT86IGFueSkgPT4gdm9pZDtcbiAgICBvbk1vZGVsVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBvblZhbGlkYXRvckNoYW5nZWQ6ICgpID0+IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGRvYzogYW55LCBwbGF0Zm9ybUlkOiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgY29uZmlnOiBRdWlsbENvbmZpZywgc2VydmljZTogUXVpbGxTZXJ2aWNlKTtcbiAgICBzdGF0aWMgbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc2VzOiBzdHJpbmcpOiBzdHJpbmdbXTtcbiAgICB2YWx1ZUdldHRlcjogKHF1aWxsRWRpdG9yOiBRdWlsbFR5cGUsIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiBhbnk7XG4gICAgdmFsdWVTZXR0ZXI6IChxdWlsbEVkaXRvcjogUXVpbGxUeXBlLCB2YWx1ZTogYW55KSA9PiBhbnk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IFByb21pc2U8dm9pZD47XG4gICAgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlcjogKHJhbmdlOiBSYW5nZSwgb2xkUmFuZ2U6IFJhbmdlLCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICB0ZXh0Q2hhbmdlSGFuZGxlcjogKGRlbHRhOiBEZWx0YSwgb2xkRGVsdGE6IERlbHRhLCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICBlZGl0b3JDaGFuZ2VIYW5kbGVyOiAoZXZlbnQ6IFwidGV4dC1jaGFuZ2VcIiB8IFwic2VsZWN0aW9uLWNoYW5nZVwiLCBjdXJyZW50OiBhbnksIG9sZDogYW55LCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGFkZENsYXNzZXMoY2xhc3NMaXN0OiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlbW92ZUNsYXNzZXMoY2xhc3NMaXN0OiBzdHJpbmcpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUoY3VycmVudFZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChtb2RlbFZhbHVlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICB2YWxpZGF0ZSgpOiB7XG4gICAgICAgIG1pbkxlbmd0aEVycm9yPzoge1xuICAgICAgICAgICAgZ2l2ZW46IG51bWJlcjtcbiAgICAgICAgICAgIG1pbkxlbmd0aDogbnVtYmVyO1xuICAgICAgICB9O1xuICAgICAgICBtYXhMZW5ndGhFcnJvcj86IHtcbiAgICAgICAgICAgIGdpdmVuOiBudW1iZXI7XG4gICAgICAgICAgICBtYXhMZW5ndGg6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWlyZWRFcnJvcj86IHtcbiAgICAgICAgICAgIGVtcHR5OiBib29sZWFuO1xuICAgICAgICB9O1xuICAgIH07XG59XG4iXX0=